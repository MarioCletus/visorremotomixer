// Generated by view binder compiler. Do not edit!
package com.basculasmagris.visorremotomixer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Switch;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.basculasmagris.visorremotomixer.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLoginBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnSearchAndSincro;

  @NonNull
  public final ConstraintLayout container;

  @NonNull
  public final EditText etUserRef;

  @NonNull
  public final LinearLayout llLoginData;

  @NonNull
  public final LinearLayout llLoginFirstIn;

  @NonNull
  public final LinearLayout llLoginNoData;

  @NonNull
  public final Button login;

  @NonNull
  public final EditText password;

  @NonNull
  public final Switch switchRole;

  @NonNull
  public final TextInputLayout tiUsersRef;

  @NonNull
  public final EditText username;

  private ActivityLoginBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnSearchAndSincro, @NonNull ConstraintLayout container,
      @NonNull EditText etUserRef, @NonNull LinearLayout llLoginData,
      @NonNull LinearLayout llLoginFirstIn, @NonNull LinearLayout llLoginNoData,
      @NonNull Button login, @NonNull EditText password, @NonNull Switch switchRole,
      @NonNull TextInputLayout tiUsersRef, @NonNull EditText username) {
    this.rootView = rootView;
    this.btnSearchAndSincro = btnSearchAndSincro;
    this.container = container;
    this.etUserRef = etUserRef;
    this.llLoginData = llLoginData;
    this.llLoginFirstIn = llLoginFirstIn;
    this.llLoginNoData = llLoginNoData;
    this.login = login;
    this.password = password;
    this.switchRole = switchRole;
    this.tiUsersRef = tiUsersRef;
    this.username = username;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLoginBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLoginBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_login, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLoginBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_search_and_sincro;
      Button btnSearchAndSincro = ViewBindings.findChildViewById(rootView, id);
      if (btnSearchAndSincro == null) {
        break missingId;
      }

      ConstraintLayout container = (ConstraintLayout) rootView;

      id = R.id.et_user_ref;
      EditText etUserRef = ViewBindings.findChildViewById(rootView, id);
      if (etUserRef == null) {
        break missingId;
      }

      id = R.id.ll_login_data;
      LinearLayout llLoginData = ViewBindings.findChildViewById(rootView, id);
      if (llLoginData == null) {
        break missingId;
      }

      id = R.id.ll_login_first_in;
      LinearLayout llLoginFirstIn = ViewBindings.findChildViewById(rootView, id);
      if (llLoginFirstIn == null) {
        break missingId;
      }

      id = R.id.ll_login_no_data;
      LinearLayout llLoginNoData = ViewBindings.findChildViewById(rootView, id);
      if (llLoginNoData == null) {
        break missingId;
      }

      id = R.id.login;
      Button login = ViewBindings.findChildViewById(rootView, id);
      if (login == null) {
        break missingId;
      }

      id = R.id.password;
      EditText password = ViewBindings.findChildViewById(rootView, id);
      if (password == null) {
        break missingId;
      }

      id = R.id.switch_role;
      Switch switchRole = ViewBindings.findChildViewById(rootView, id);
      if (switchRole == null) {
        break missingId;
      }

      id = R.id.ti_users_ref;
      TextInputLayout tiUsersRef = ViewBindings.findChildViewById(rootView, id);
      if (tiUsersRef == null) {
        break missingId;
      }

      id = R.id.username;
      EditText username = ViewBindings.findChildViewById(rootView, id);
      if (username == null) {
        break missingId;
      }

      return new ActivityLoginBinding((ConstraintLayout) rootView, btnSearchAndSincro, container,
          etUserRef, llLoginData, llLoginFirstIn, llLoginNoData, login, password, switchRole,
          tiUsersRef, username);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
