// Generated by view binder compiler. Do not edit!
package com.basculasmagris.visorremotomixer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.basculasmagris.visorremotomixer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRoundRunBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FrameLayout fragmentRoundRun;

  @NonNull
  public final ImageView ibLogo;

  @NonNull
  public final LinearLayout llProgress;

  @NonNull
  public final Toolbar toolbarRoundRun;

  @NonNull
  public final ConstraintLayout viewActivityRoundRun;

  private ActivityRoundRunBinding(@NonNull ConstraintLayout rootView,
      @NonNull FrameLayout fragmentRoundRun, @NonNull ImageView ibLogo,
      @NonNull LinearLayout llProgress, @NonNull Toolbar toolbarRoundRun,
      @NonNull ConstraintLayout viewActivityRoundRun) {
    this.rootView = rootView;
    this.fragmentRoundRun = fragmentRoundRun;
    this.ibLogo = ibLogo;
    this.llProgress = llProgress;
    this.toolbarRoundRun = toolbarRoundRun;
    this.viewActivityRoundRun = viewActivityRoundRun;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRoundRunBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRoundRunBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_round_run, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRoundRunBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fragment_round_run;
      FrameLayout fragmentRoundRun = ViewBindings.findChildViewById(rootView, id);
      if (fragmentRoundRun == null) {
        break missingId;
      }

      id = R.id.ib_logo;
      ImageView ibLogo = ViewBindings.findChildViewById(rootView, id);
      if (ibLogo == null) {
        break missingId;
      }

      id = R.id.ll_progress;
      LinearLayout llProgress = ViewBindings.findChildViewById(rootView, id);
      if (llProgress == null) {
        break missingId;
      }

      id = R.id.toolbar_round_run;
      Toolbar toolbarRoundRun = ViewBindings.findChildViewById(rootView, id);
      if (toolbarRoundRun == null) {
        break missingId;
      }

      ConstraintLayout viewActivityRoundRun = (ConstraintLayout) rootView;

      return new ActivityRoundRunBinding((ConstraintLayout) rootView, fragmentRoundRun, ibLogo,
          llProgress, toolbarRoundRun, viewActivityRoundRun);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
