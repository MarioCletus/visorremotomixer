// Generated by view binder compiler. Do not edit!
package com.basculasmagris.visorremotomixer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.basculasmagris.visorremotomixer.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemLineRoundCorralBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText etAnimalQuantity;

  @NonNull
  public final EditText etFoodByAnimals;

  @NonNull
  public final EditText etPercentage;

  @NonNull
  public final EditText etWeightCorral;

  @NonNull
  public final TextInputLayout tiAnimalQuantity;

  @NonNull
  public final TextInputLayout tiFoodByAnimals;

  @NonNull
  public final TextInputLayout tiPercentage;

  @NonNull
  public final TextInputLayout tiWeightCorral;

  @NonNull
  public final TextView tvCorralAnimalCount;

  @NonNull
  public final TextView tvCorralDescription;

  @NonNull
  public final TextView tvCorralName;

  @NonNull
  public final TextView tvCorralOrder;

  private ItemLineRoundCorralBinding(@NonNull LinearLayout rootView,
      @NonNull EditText etAnimalQuantity, @NonNull EditText etFoodByAnimals,
      @NonNull EditText etPercentage, @NonNull EditText etWeightCorral,
      @NonNull TextInputLayout tiAnimalQuantity, @NonNull TextInputLayout tiFoodByAnimals,
      @NonNull TextInputLayout tiPercentage, @NonNull TextInputLayout tiWeightCorral,
      @NonNull TextView tvCorralAnimalCount, @NonNull TextView tvCorralDescription,
      @NonNull TextView tvCorralName, @NonNull TextView tvCorralOrder) {
    this.rootView = rootView;
    this.etAnimalQuantity = etAnimalQuantity;
    this.etFoodByAnimals = etFoodByAnimals;
    this.etPercentage = etPercentage;
    this.etWeightCorral = etWeightCorral;
    this.tiAnimalQuantity = tiAnimalQuantity;
    this.tiFoodByAnimals = tiFoodByAnimals;
    this.tiPercentage = tiPercentage;
    this.tiWeightCorral = tiWeightCorral;
    this.tvCorralAnimalCount = tvCorralAnimalCount;
    this.tvCorralDescription = tvCorralDescription;
    this.tvCorralName = tvCorralName;
    this.tvCorralOrder = tvCorralOrder;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemLineRoundCorralBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemLineRoundCorralBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_line_round_corral, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemLineRoundCorralBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.et_animal_quantity;
      EditText etAnimalQuantity = ViewBindings.findChildViewById(rootView, id);
      if (etAnimalQuantity == null) {
        break missingId;
      }

      id = R.id.et_food_by_animals;
      EditText etFoodByAnimals = ViewBindings.findChildViewById(rootView, id);
      if (etFoodByAnimals == null) {
        break missingId;
      }

      id = R.id.et_percentage;
      EditText etPercentage = ViewBindings.findChildViewById(rootView, id);
      if (etPercentage == null) {
        break missingId;
      }

      id = R.id.et_weight_corral;
      EditText etWeightCorral = ViewBindings.findChildViewById(rootView, id);
      if (etWeightCorral == null) {
        break missingId;
      }

      id = R.id.ti_animal_quantity;
      TextInputLayout tiAnimalQuantity = ViewBindings.findChildViewById(rootView, id);
      if (tiAnimalQuantity == null) {
        break missingId;
      }

      id = R.id.ti_food_by_animals;
      TextInputLayout tiFoodByAnimals = ViewBindings.findChildViewById(rootView, id);
      if (tiFoodByAnimals == null) {
        break missingId;
      }

      id = R.id.ti_percentage;
      TextInputLayout tiPercentage = ViewBindings.findChildViewById(rootView, id);
      if (tiPercentage == null) {
        break missingId;
      }

      id = R.id.ti_weight_corral;
      TextInputLayout tiWeightCorral = ViewBindings.findChildViewById(rootView, id);
      if (tiWeightCorral == null) {
        break missingId;
      }

      id = R.id.tv_corral_animal_count;
      TextView tvCorralAnimalCount = ViewBindings.findChildViewById(rootView, id);
      if (tvCorralAnimalCount == null) {
        break missingId;
      }

      id = R.id.tv_corral_description;
      TextView tvCorralDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvCorralDescription == null) {
        break missingId;
      }

      id = R.id.tv_corral_name;
      TextView tvCorralName = ViewBindings.findChildViewById(rootView, id);
      if (tvCorralName == null) {
        break missingId;
      }

      id = R.id.tv_corral_order;
      TextView tvCorralOrder = ViewBindings.findChildViewById(rootView, id);
      if (tvCorralOrder == null) {
        break missingId;
      }

      return new ItemLineRoundCorralBinding((LinearLayout) rootView, etAnimalQuantity,
          etFoodByAnimals, etPercentage, etWeightCorral, tiAnimalQuantity, tiFoodByAnimals,
          tiPercentage, tiWeightCorral, tvCorralAnimalCount, tvCorralDescription, tvCorralName,
          tvCorralOrder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
